[{"id":0,"href":"/docs/","title":"Go HTTP Server Documentation","section":"Go HTTP Server Documentation","content":" Go HTTP Server Documentation # Welcome to the comprehensive documentation for our Go HTTP Server project! This documentation covers everything you need to know about the simple HTTP server built with Go\u0026rsquo;s standard library.\nWhat You\u0026rsquo;ll Find Here # Project Overview: Understanding the architecture and goals API Reference: Detailed endpoint documentation Code Examples: Practical usage examples Getting Started: Step-by-step setup instructions Quick Start # This server provides a simple REST API for product management with the following endpoints:\nGET / - Welcome message GET /products - Retrieve all products The server runs on port 3000 and supports CORS for frontend integration.\nFeatures # ‚úÖ RESTful API design ‚úÖ JSON response handling ‚úÖ CORS support ‚úÖ Error handling ‚úÖ In-memory data storage Get started by exploring the Project Overview or jump straight to the API Reference.\n"},{"id":1,"href":"/docs/project-overview/intro/","title":"Introduction","section":"Project Overview","content":" Introduction to Go HTTP Server # What is this project? # This is a simple HTTP server built in Go that demonstrates fundamental web development concepts. The server provides a RESTful API for managing product data with JSON responses.\nKey Features # üåê HTTP Server # Built with Go\u0026rsquo;s standard net/http package Custom router using http.NewServeMux() Runs on port 3000 üì° API Endpoints # Home endpoint (/) - Welcome message Products endpoint (/products) - Product data in JSON format üîß Technical Implementation # Type-safe structures - Custom TProduct struct JSON encoding - Automatic JSON marshaling Method validation - Only GET requests allowed for products CORS headers - Cross-origin resource sharing support Error handling - Proper HTTP status codes Code Structure # The entire server is implemented in a single file (class47.go) with:\nHandler functions for each endpoint Product type definition Global product storage Server initialization and startup Learning Objectives # This project helps you understand:\nHTTP server basics in Go Request routing and handling JSON API development CORS configuration Error handling patterns Go\u0026rsquo;s type system and structs Next Steps # Continue reading to explore the detailed architecture and API documentation.\n"},{"id":2,"href":"/docs/project-overview/","title":"Project Overview","section":"Go HTTP Server Documentation","content":" Project Overview # This section provides a comprehensive overview of our Go HTTP Server project, including its architecture, goals, and implementation details.\nArchitecture # The server is built using Go\u0026rsquo;s standard library with the following key components:\nHTTP Router: http.NewServeMux() for request routing Handler Functions: Modular functions for each endpoint JSON Encoding: Built-in JSON marshaling for API responses In-Memory Storage: Simple slice-based data storage Project Goals # Learning: Demonstrate basic HTTP server concepts in Go Simplicity: Clean, readable code for educational purposes RESTful Design: Follow REST API conventions JSON API: Provide structured JSON responses CORS Support: Enable frontend integration Technology Stack # Language: Go (Golang) HTTP Server: Go standard library (net/http) Data Format: JSON Storage: In-memory (slice) Documentation: Hugo with Book theme "},{"id":3,"href":"/docs/api/reference/","title":"API Reference","section":"Go HTTP Server Documentation","content":" API Reference # Complete reference for all available endpoints in the Go HTTP Server.\nBase URL # http://localhost:3000 Endpoints # GET / # Returns a welcome message from the server.\nResponse Headers:\nContent-Type: application/json Response:\nWelcome to the home page! This is a simple HTTP server in Go. Example Request:\ncurl http://localhost:3000/ GET /products # Retrieves all available products in JSON format.\nMethod: GET\nResponse Headers:\nAccess-Control-Allow-Origin: * Content-Type: application/json Response Format:\n[ { \u0026#34;ID\u0026#34;: 1, \u0026#34;TITLE\u0026#34;: \u0026#34;Orange\u0026#34;, \u0026#34;DESCRIPTION\u0026#34;: \u0026#34;Very Sweet fruit\u0026#34;, \u0026#34;PRICE\u0026#34;: 100, \u0026#34;ImgUrl\u0026#34;: \u0026#34;https://images.unsplash.com/photo-1557800636-894a64c1696f?w=500\u0026amp;auto=format\u0026amp;fit=crop\u0026amp;q=60\u0026amp;ixlib=rb-4.1.0\u0026amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8b3JhbmdlfGVufDB8fDB8fHww\u0026#34; } ] Example Request:\ncurl http://localhost:3000/products Error Responses:\nIf a non-GET method is used:\nStatus Code: 400 Bad Request Response: Please give me get request Example Error Request:\ncurl -X POST http://localhost:3000/products Data Models # TProduct # Represents a product in the system.\nField Type Description ID int Unique product identifier TITLE string Product name/title DESCRIPTION string Product description PRICE float64 Product price ImgUrl string URL to product image Example:\n{ \u0026#34;ID\u0026#34;: 1, \u0026#34;TITLE\u0026#34;: \u0026#34;Orange\u0026#34;, \u0026#34;DESCRIPTION\u0026#34;: \u0026#34;Very Sweet fruit\u0026#34;, \u0026#34;PRICE\u0026#34;: 100, \u0026#34;ImgUrl\u0026#34;: \u0026#34;https://images.unsplash.com/photo-1557800636-894a64c1696f?w=500\u0026amp;auto=format\u0026amp;fit=crop\u0026amp;q=60\u0026amp;ixlib=rb-4.1.0\u0026amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8b3JhbmdlfGVufDB8fDB8fHww\u0026#34; } Status Codes # Code Description 200 Success - Request completed successfully 400 Bad Request - Invalid request method CORS Support # The API supports Cross-Origin Resource Sharing (CORS) with the following header:\nAccess-Control-Allow-Origin: * This allows the API to be called from any domain, making it suitable for frontend integration.\n"},{"id":4,"href":"/docs/classes/","title":"Go Classes","section":"Go HTTP Server Documentation","content":" Go Classes and Files # This section contains documentation for all Go class files in this project.\nAvailable Classes # class47.go - Documentation auto-generated on Mon 01 Sep 2025 11:46:21 PM +06\n"},{"id":5,"href":"/docs/classes/class47/","title":"class47","section":"Go Classes","content":" class47 Documentation # Source Code # package main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func homeHandler(w http.ResponseWriter, r *http.Request) { w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) w.WriteHeader(http.StatusOK) fmt.Fprintln(w, \u0026#34;Welcome to the home page! This is a simple HTTP server in Go.\u0026#34;) } type TProduct struct { ID int TITLE string DESCRIPTION string PRICE float64 ImgUrl string } func getProducts(w http.ResponseWriter, r *http.Request) { w.Header().Set(\u0026#34;Access-Controll-Allow-Origin\u0026#34;, \u0026#34;*\u0026#34;) w.Header().Set(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) if r.Method != http.MethodGet { http.Error(w, \u0026#34;Please give me get request\u0026#34;, 400) return } w.WriteHeader(http.StatusOK) encoder := json.NewEncoder(w) encoder.Encode(productList) } var productList []TProduct func main() { mux := http.NewServeMux() // router mux.HandleFunc(\u0026#34;/\u0026#34;, homeHandler) // home route mux.HandleFunc(\u0026#34;/products\u0026#34;, getProducts) fmt.Println(\u0026#34;Server is running on port 3000\u0026#34;) err := http.ListenAndServe(\u0026#34;:3000\u0026#34;, mux) if err != nil { fmt.Println(\u0026#34;Error starting server:\u0026#34;, err) return } } func init() { prod1 := TProduct{ ID: 1, TITLE: \u0026#34;Orange\u0026#34;, DESCRIPTION: \u0026#34;Very Sweet fruit\u0026#34;, PRICE: 100, ImgUrl: \u0026#34;https://images.unsplash.com/photo-1557800636-894a64c1696f?w=500\u0026amp;auto=format\u0026amp;fit=crop\u0026amp;q=60\u0026amp;ixlib=rb-4.1.0\u0026amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8b3JhbmdlfGVufDB8fDB8fHww\u0026#34;, } productList = append(productList, prod1) } File Information # Filename: class47.go Created: Mon 01 Sep 2025 11:46:20 PM +06 Size: 1532 bytes Lines: 65 lines Functions and Types # Line 9:func homeHandler(w http.ResponseWriter, r *http.Request) { Line 15:type TProduct struct { Line 23:func getProducts(w http.ResponseWriter, r *http.Request) { Line 38:func main() { Line 55:func init() { Description # This documentation was auto-generated from the source file.\n"}]